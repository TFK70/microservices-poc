schema {
  query: Query
  mutation: Mutation
}

type Query {
  listUsers(input: ListUsersInput): ListUsersResponse
  listSessions(input: ListSessionsInput): ListSessionsResponse
  connectivityState(tryToConnect: Boolean): ConnectivityState
}

type ListUsersResponse {
  users: [User]
}

type User {
  id: String
  name: String
}

scalar ListUsersInput
  @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type ListSessionsResponse {
  sessions: [Session]
}

type Session {
  id: String
  name: String
  bindings: [SessionBinding]
}

type SessionBinding {
  id: String
  userId: String
  sessionId: String
}

scalar ListSessionsInput
  @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

enum ConnectivityState {
  IDLE
  CONNECTING
  READY
  TRANSIENT_FAILURE
  SHUTDOWN
}

type Mutation {
  createUser(input: CreateUserInput): CreateUserResponse
  createSession(input: CreateSessionInput): CreateSessionResponse
  joinUser(input: JoinUserInput): JoinUserResponse
  killSession(input: KillSessionInput): KillSessionResponse
  sendMessage(input: SendMessageInput): SendMessageResponse
  receiveMessages(input: ReceiveMessagesInput): ReceiveMessagesResponse
}

type CreateUserResponse {
  id: String
}

input CreateUserInput {
  name: String
}

type CreateSessionResponse {
  id: String
}

input CreateSessionInput {
  name: String
}

type JoinUserResponse {
  success: Boolean
}

input JoinUserInput {
  userId: String
  sessionId: String
}

type KillSessionResponse {
  id: String
}

input KillSessionInput {
  id: String
}

type SendMessageResponse {
  id: String
}

input SendMessageInput {
  senderId: String
  sessionId: String
  payload: String
}

type ReceiveMessagesResponse {
  messages: [Message]
}

type Message {
  id: String
  date: String
  payload: String
  senderId: String
  sessionId: String
}

input ReceiveMessagesInput {
  userId: String
}
